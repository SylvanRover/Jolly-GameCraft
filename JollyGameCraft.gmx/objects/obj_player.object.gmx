<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>-100</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

phy_fixed_rotation = true;
alarm[0]=10;
alarm[1]=0;
alarm[2]=0;
enemyTargeting = false;
alarmFinished = false;
dir = direction;
combatAxisObject = true;
combatAxisWorld = false;
los = 150;
distanceToEnemy = 10000;
inRange = false;
nth_target=1;
switchTarget = true;
targetInRange = false;
block = false;
attackR = false;
attackL = false;
hp_current = 100;
hp_max = 100;
stamina_current = 100;
stamina_max = 100;
mana_current = 100;
mana_max = 100;
damage_melee = 20;
damage_ranged = 20;
staminaAttackR = 20;
staminaBlock = 20;
attackRange = 12;
stun = false;
stunLength = 32;
healthBarActive = false;
died = false;

dodge = false;
dodgeX = 5;
dodgeY = 3;
staminaDodge = 50;

button_attack = keyboard_check_released (ord('D'));
button_block = keyboard_check (ord('W'));
button_target = keyboard_check_pressed(vk_lshift);

//Inventory Light
weapon_sword = false;
weapon_bow = true;
itemEquip = 0;
itemEquip_max = 1;

// Movement
xAxis = 0;
yAxis = 0;
magnitude = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Lights

//instance_create(x,y,obj_LoS);
instance_create(x,y,obj_player_light);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create player shadow

instance_create(x,y,obj_player_shadow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dodge

dodge = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health Bar Activated

healthBarActive = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stun Finished

stun = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set attacks to false

attackL = false;
attackR = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm Finished
alarmFinished = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>-100</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death
if (!died &amp;&amp; hp_current &lt;= 0)
{
    sprite_index = spr_death;
    instance_create(x,y,obj_died);
    phy_speed_x = 0;
    phy_speed_y = 0;
    died = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Controls

if (obj_player_controller.settingsOpen) || (hp_current &lt;= 0){
    phy_speed_x = 0;
    phy_speed_y = 0;
    exit;
}

if (obj_player_controller.controls_keyboard)
{

    mbLeftRelease = mouse_check_button_released(mb_left);
    mbLeftCheck = mouse_check_button(mb_left);
    vkLShiftCheck = keyboard_check_pressed(vk_lshift);
    target = instance_nth_nearest(x,y,par_enemy,nth_target);
    enemyTargetX = instance_nearest(x, y-12, obj_enemy_targeting).x;
    enemyTargetY = instance_nearest(x, y-12, obj_enemy_targeting).y;

    direction = point_direction(x, y, mouse_x, mouse_y);
    // Basic Movement
    if (mbLeftCheck &amp;&amp; !enemyTargeting) 
    {
        instance_create(mouse_x, mouse_y, obj_move_to_cursor);
        dir = point_direction(x, y, mouse_x, mouse_y);
        phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir);
        phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
        //direction = dir;
    }
    
    if (mbLeftRelease &amp;&amp; !enemyTargeting)
    {
        instance_create(mouse_x, mouse_y, obj_move_to_point);
        dir = point_direction(x, y, obj_move_to_point.x, obj_move_to_point.y);
        phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir);
        phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
        //direction = dir;
    }
    
    // Enemy Targeting Movement
    if (enemyTargeting)
    {
        if (switchTarget)
        {
            instance_create(target.x,target.y,obj_enemy_targeting);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
            switchTarget = false;
            targetInRange = true;
            
        }
            
        // Strafing            
        if (mbLeftCheck) 
        {
            instance_create(mouse_x, mouse_y, obj_move_to_cursor);
            dir = point_direction(x, y, mouse_x, mouse_y);
            phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir); //SPEED is the speed you want to move at.
            phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        }
        
        if (mbLeftRelease)
        {
            instance_create(mouse_x, mouse_y, obj_move_to_point);
            dir = point_direction(x, y, obj_move_to_point.x, obj_move_to_point.y);
            phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir); //SPEED is the speed you want to move at.
            phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        }
    }
    
    // Target In Range
    if (collision_ellipse(x-(los), y-((los/2)+8), x+(los), y+((los/2)+8), target, false, true))
    {
        inRange = true;
    }
    else
    {
        inRange = false;
        nth_target = 1
    }
    
    if (collision_ellipse(x-(los), y-((los/2)+8), x+(los), y+((los/2)+8), obj_enemy_targeting, false, true))
    {
        targetInRange = true;
    }
    else
    {
        targetInRange = false;
        enemyTargeting = false;
        nth_target = 1
    }
        
    //Enemy Targeting
    if (!inRange || enemyTargeting &amp;&amp; vkLShiftCheck &amp;&amp; alarmFinished)
    {
        alarmFinished = false;
        enemyTargeting = false;
        alarm[0] = 2;
    }
    
    if (inRange &amp;&amp; !enemyTargeting &amp;&amp; vkLShiftCheck &amp;&amp; alarmFinished)
    {
        alarmFinished = false;
        enemyTargeting = true;
        alarm[0] = 2;
        switchTarget = true;
        nth_target = 1
        
        switch nth_target
        {
            case 1: nth_target = 1; break //switch the target between the 1st,2nd and 3rd closest enemies
            case 2: nth_target = 2; break
            case 3: nth_target = 3; break
        }
        
    }
    
    // Cycle Targets
    if (keyboard_check_pressed(ord('E')))
    {
        nth_target += 1;
        switchTarget = true;
    }
    if (keyboard_check_pressed(ord('Q')))
    {
        nth_target -= 1;        
        switchTarget = true;
    }
    if (nth_target &lt; 1) nth_target = 1;
    if (nth_target &gt; 3) nth_target = 3;
    
    
    //Stop Movement on collision with Cursor and Point
    if (collision_circle(x, y, 8, obj_move_to_point,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
    if (collision_circle(x, y, 10, obj_move_to_cursor,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
        
    //Sprite Directions
    d = (direction + 45) div 90;
    
    if (phy_speed_x = 0 &amp;&amp; phy_speed_y = 0 &amp;&amp; !attackR)
    {
        switch (d) 
        {     
            case 0: sprite_index = spr_player_idle_right; break;    
            case 1: sprite_index = spr_player_idle_up;  break;    
            case 2: sprite_index = spr_player_idle_left; break;    
            case 3: sprite_index = spr_player_idle_down;  break; 
        }
        
        if (direction &gt;= 315) sprite_index = spr_player_idle_right;
    }
    
    if ((phy_speed_x != 0 || phy_speed_y != 0) &amp;&amp; !attackR)
    {
        switch (d) 
        {     
            case 0: sprite_index = spr_player_walk_right; break;    
            case 1: sprite_index = spr_player_walk_up;  break;    
            case 2: sprite_index = spr_player_walk_left; break;    
            case 3: sprite_index = spr_player_walk_down;  break; 
        }
        
        if (direction &gt;= 315 &amp;&amp; !attackR) sprite_index = spr_player_walk_right;
    }
        
    //Vertical Speed Clamp
    if (phy_speed_y &gt; obj_player_controller.speedY) phy_speed_y = obj_player_controller.speedY;
    if (phy_speed_y &lt; -obj_player_controller.speedY) phy_speed_y = -obj_player_controller.speedY;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GamePad Controls
if (obj_player_controller.settingsOpen) || (hp_current &lt;= 0) exit;

mbLeftRelease = mouse_check_button_released(mb_left);
mbLeftCheck = mouse_check_button(mb_left);
target = instance_nth_nearest(x,y,par_enemy,nth_target);
enemyTargetX = instance_nearest(x, y-12, obj_enemy_targeting).x;
enemyTargetY = instance_nearest(x, y-12, obj_enemy_targeting).y;
speedX = obj_player_controller.speedX;
speedY = obj_player_controller.speedY;

xAxis = gamepad_axis_value(0,gp_axislh);
yAxis = gamepad_axis_value(0,gp_axislv);
magnitude = point_distance(0, 0, xAxis, yAxis)


if (gamepad_is_supported()
&amp;&amp; gamepad_is_connected(0)
&amp;&amp; obj_player_controller.controls_gamePad){
    // Movement
    if (!dodge){
        if gamepad_is_connected(0) gamepad_set_axis_deadzone(0, 0.2);
        button_target = gamepad_button_check_pressed (0, gp_stickr);
        
        if (magnitude &gt;= 0.6){
            if(abs(xAxis) &gt; 0.44) phy_speed_x = speedX * xAxis;
            else phy_speed_x = 0;
            if(abs(yAxis) &gt; 0.44) phy_speed_y = speedY * yAxis;
            else phy_speed_y = 0;
        }
        else{
            phy_speed_x = 0;
            phy_speed_y = 0;
        }
        
        axis_h = gamepad_axis_value(0, gp_axislh)
        axis_v = gamepad_axis_value(0, gp_axislv)
        dist = point_distance(0, 0, axis_h, axis_v);
    }
    
    // Direction 
    if (!enemyTargeting){
        if dist &gt; 0.18{
            x += gamepad_axis_value(0,gp_axislh) * speedX;
            y += gamepad_axis_value(0,gp_axislv) * speedY;
         
            dx= (gamepad_axis_value(0, gp_axislh) &gt; 0) - (gamepad_axis_value(0, gp_axislh) &lt; 0)
            dy= (gamepad_axis_value(0, gp_axislv) &gt; 0) - (gamepad_axis_value(0, gp_axislv) &lt; 0)
         
         
            if(dx != 0 or dy != 0){
                dir = point_direction(0,0,dx, dy);
            }
         
            direction = point_direction(0, 0, gamepad_axis_value(0, gp_axislh), gamepad_axis_value(0, gp_axislv));
            direction = direction mod 360;
        }
        if (gamepad_axis_value(0, gp_axisrv)!=0 || gamepad_axis_value(0, gp_axisrh)!=0){
            x += gamepad_axis_value(0,gp_axislh) * speedX;
            y += gamepad_axis_value(0,gp_axislv) * speedY;
         
            dx= (gamepad_axis_value(0, gp_axisrh) &gt; 0) - (gamepad_axis_value(0, gp_axisrh) &lt; 0)
            dy= (gamepad_axis_value(0, gp_axisrv) &gt; 0) - (gamepad_axis_value(0, gp_axisrv) &lt; 0)
         
         
            if(dx != 0 or dy != 0){
                dir = point_direction(0,0,dx, dy);
            }
         
            direction = point_direction(0, 0, gamepad_axis_value(0, gp_axisrh), gamepad_axis_value(0, gp_axisrv));
            direction = direction mod 360;
        }
    }
    
    // Dodge
    if(gamepad_button_check_pressed(0,gp_face1) &amp;&amp; (staminaDodge &lt; stamina_current)){
        alarm[4] = 10;
        dodge = true;
        stamina_current -= staminaDodge;
        if (magnitude &gt;= 0.6){
            if(abs(xAxis) &gt; 0.44) phy_speed_x = dodgeX * xAxis;
            else phy_speed_x = 0;
            if(abs(yAxis) &gt; 0.44) phy_speed_y = dodgeY * yAxis;
            else phy_speed_y = 0;
        }
    }
            
    // Enemy Targeting Movement
    if (enemyTargeting){
        if (switchTarget){
            instance_create(target.x,target.y,obj_enemy_targeting);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
            switchTarget = false;
            targetInRange = true;
            
        }
        
        direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        
    }
    
    // Target In Range
    if (collision_ellipse(x-(los), y-((los/2)+8), x+(los), y+((los/2)+8), target, false, true)){
        inRange = true;
    }
    else{
        inRange = false;
        nth_target = 1
    }
    
    if (collision_ellipse(x-(los), y-((los/2)+8), x+(los), y+((los/2)+8), obj_enemy_targeting, false, true)){
        targetInRange = true;
    }
    else{
        targetInRange = false;
        enemyTargeting = false;
        nth_target = 1
    }
        
    //Enemy Targeting
    if (!inRange || enemyTargeting &amp;&amp; button_target &amp;&amp; alarmFinished){
        alarmFinished = false;
        enemyTargeting = false;
        alarm[0] = 2;
    }
    
    if (inRange &amp;&amp; !enemyTargeting &amp;&amp; button_target &amp;&amp; alarmFinished){
        alarmFinished = false;
        enemyTargeting = true;
        alarm[0] = 2;
        switchTarget = true;
        nth_target = 1
        
        switch nth_target{
            case 1: nth_target = 1; break //switch the target between the 1st,2nd and 3rd closest enemies
            case 2: nth_target = 2; break
            case 3: nth_target = 3; break
        }
        
    }
    
    // Switch Usable Items
    if (gamepad_button_check_pressed(0, gp_padl)) itemEquip -= 1;
    if (gamepad_button_check_pressed(0, gp_padr)) itemEquip += 1;
    if (itemEquip &lt; 0) itemEquip = itemEquip_max;
    if (itemEquip &gt; itemEquip_max) itemEquip = 0;
    
    if (itemEquip = 0){
        weapon_sword = true;
        weapon_bow = false;
    }
    if (itemEquip = 1){
        weapon_sword = false;
        weapon_bow = true;
    }
    
    // Cycle Targets
    if (enemyTargeting){
        if (keyboard_check_pressed(ord('E'))){
            nth_target += 1;
            switchTarget = true;
        }
        if (keyboard_check_pressed(ord('Q'))){
            nth_target -= 1;        
            switchTarget = true;
        }
        if (nth_target &lt; 1) nth_target = 1;
        if (nth_target &gt; 3) nth_target = 3;
    }
    
    
    //Stop Movement on collision with Cursor and Point
    if (collision_circle(x, y, 8, obj_move_to_point,true,true)){
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
    if (collision_circle(x, y, 8, obj_move_to_cursor,true,true)){
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
        
    //Sprite Directions
    d = (direction + 45) div 90;
    
    if (phy_speed_x = 0 &amp;&amp; phy_speed_y = 0 &amp;&amp; !attackR){
        switch (d) {     
            case 0: sprite_index = spr_player_idle_right; break;    
            case 1: sprite_index = spr_player_idle_up;  break;    
            case 2: sprite_index = spr_player_idle_left; break;    
            case 3: sprite_index = spr_player_idle_down;  break; 
        }
        
        if (direction &gt;= 315) sprite_index = spr_player_idle_right;
    }
    
    if ((phy_speed_x != 0 || phy_speed_y != 0) &amp;&amp; !attackR){
        switch (d) {     
            case 0: sprite_index = spr_player_walk_right; break;    
            case 1: sprite_index = spr_player_walk_up;  break;    
            case 2: sprite_index = spr_player_walk_left; break;    
            case 3: sprite_index = spr_player_walk_down;  break; 
        }
        
        if (direction &gt;= 315 &amp;&amp; direction &lt; 360 &amp;&amp; !attackR) sprite_index = spr_player_walk_right;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Combat
if (obj_player_controller.settingsOpen) || (hp_current &lt;= 0) exit;

if (gamepad_is_supported()
&amp;&amp; gamepad_is_connected(0)
&amp;&amp; obj_player_controller.controls_gamePad){
    button_attack = gamepad_button_check_released(0,gp_shoulderr);
    button_block = gamepad_button_check (0,gp_shoulderl);
    button_target = gamepad_button_check_pressed (0,gp_stickr);
}
if (obj_player_controller.controls_keyboard){
    button_attack = keyboard_check_released (ord('D'));
    button_block = keyboard_check (ord('W'));
    button_target = keyboard_check_pressed (vk_lshift);
}

if (!block) stamina_current += 1.5;
if (block) stamina_current += 0.2;
if (stamina_current &gt;= stamina_max) stamina_current = stamina_max;
if (stamina_current &lt;= 0.1) stamina_current = 0.1;
if (stamina_current &lt;= 0.1){
    stun = true;
    block = false;
    alarm[2] = stunLength;
}    
if (stun){
    phy_speed_x = 0;
    phy_speed_y = 0;
}

// Melee Attack
if (weapon_sword){
    if (!button_block){
        block = false;
    }
    
    if(!stun){
        if (direction &gt;= 0 &amp;&amp; direction &lt; 45 || direction &gt; 315){ // Right
            if (combatAxisObject) {
                if (button_block &amp;&amp; !attackR &amp;&amp; !stun){
                    block = true;            
                    sprite_index = spr_player_block_right;
                }
                
                if (keyboard_check_released (ord('A'))){
                    attackL = true;
                }
                if (keyboard_check_released (ord('S'))){
                    
                }
                if (button_attack &amp;&amp; !attackR &amp;&amp; !stun &amp;&amp; stamina_current &gt;= staminaAttackR){
                    sprite_index = spr_player_attack_right;
                    attackR = true;
                    alarm[1]=8;
                    instance_create(x+8, y-12, obj_player_attack);
                    stamina_current -= staminaAttackR;
                }
                            
            }
        }
        
        if (direction &gt;= 45 &amp;&amp; direction &lt;= 135){ // Up
            if (combatAxisObject) {
                if (button_block &amp;&amp; !attackR &amp;&amp; !stun){
                    block = true;            
                    sprite_index = spr_player_block_up;
                }
                
                if (keyboard_check_released (ord('A'))){
                    attackL = true;
                }
                if (keyboard_check_released (ord('S'))){
                    sprite_index = spr_player_attack_up;
                }
                if (button_attack &amp;&amp; !attackR &amp;&amp; !stun &amp;&amp; stamina_current &gt;= staminaAttackR){
                    attackR = true;
                    sprite_index = spr_player_attack_up;
                    alarm[1]=8;
                    instance_create(x, y-16, obj_player_attack);
                    stamina_current -= staminaAttackR;
                }
            }
        }
        
        if (direction &gt; 135 &amp;&amp; direction &lt; 225){ // Left
            if (combatAxisObject) {
                if (button_block &amp;&amp; !attackR &amp;&amp; !stun){
                    block = true;            
                    sprite_index = spr_player_block_left;
                }
                
                if (keyboard_check_released (ord('A'))){
                    attackL = true;
                }
                if (keyboard_check_released (ord('S'))){
                    sprite_index = spr_player_attack_left;
                }
                if (button_attack &amp;&amp; !attackR &amp;&amp; !stun &amp;&amp; stamina_current &gt;= staminaAttackR){
                    attackR = true;
                    sprite_index = spr_player_attack_left;
                    alarm[1]=8;
                    instance_create(x-8, y-12, obj_player_attack);
                    stamina_current -= staminaAttackR;
                }
            }
        }
        
        if (direction &gt;= 225 &amp;&amp; direction &lt;= 315){ // Down
            if (combatAxisObject) {
                if (button_block &amp;&amp; !attackR &amp;&amp; !stun){
                    block = true;            
                    sprite_index = spr_player_block_down;
                }
                
                if (keyboard_check_released (ord('A'))){
                    attackL = true;
                }
                if (keyboard_check_released (ord('S'))){
                    sprite_index = spr_player_attack_down;
                }
                if (button_attack &amp;&amp; !attackR &amp;&amp; !stun &amp;&amp; stamina_current &gt;= staminaAttackR){
                    attackR = true;
                    sprite_index = spr_player_attack_down;
                    alarm[1]=8;
                    instance_create(x, y, obj_player_attack);
                    stamina_current -= staminaAttackR;
                }
            }
        }
    }  
}

// Ranged
if(weapon_bow){
    if(button_attack){
        instance_create(x,y-8, obj_arrow);
    }
}

























</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Collision
if (obj_player_controller.settingsOpen) exit;

if (!block &amp;&amp; collision_ellipse(x-(attackRange*2), y-((attackRange)+8), x+(attackRange*2), y+((attackRange)+8), obj_enemy_attack, false, true)){
    hp_current -= obj_enemy_skeleton.damage;
    obj_enemy_attack.attackHit = true;
    healthBarActive = true;    
    alarm[3] = 100;
}

if (!stun &amp;&amp; block &amp;&amp; collision_ellipse(x-(attackRange*2), y-((attackRange)+8), x+(attackRange*2), y+((attackRange)+8), obj_enemy_attack, false, true)){
    stamina_current -= staminaBlock;
    obj_enemy_attack.attackHit = true;
    healthBarActive = true;
    alarm[3] = 100;
}

if (stamina_current != stamina_max){
    healthBarActive = true;
    alarm[3] = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ship_hull">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Health Bar

if (healthBarActive)
{
    if(hp_current &gt; 0)
    {
        draw_healthbar(phy_position_x-8,phy_position_y-33,phy_position_x+8,phy_position_y-35,hp_current,c_black,c_maroon,c_red,0,true,false)
    }
    
    if(hp_current &gt; 0 &amp;&amp; stamina_current &gt;= 0)
    {
        draw_healthbar(phy_position_x-8,phy_position_y-33,phy_position_x+8,phy_position_y-33,stamina_current,c_black,make_colour_rgb(130,177,1),make_colour_rgb(130,177,1),0,true,false)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,32</point>
    <point>12,32</point>
    <point>8,28</point>
    <point>12,24</point>
    <point>20,24</point>
    <point>24,28</point>
  </PhysicsShapePoints>
</object>
